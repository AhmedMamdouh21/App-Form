{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","title","phonePattern","signupForm","required","email","pattern","minLength","console","log","control","get","push","controls","onSubmit","onAddHobbies","selector","templateUrl","styleUrls","AppModule","declarations","imports","providers","bootstrap","environment","production","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators, FormArray } from '@angular/forms'\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  title = 'app-form';\n  signupForm: FormGroup;\n  phonePattern = /^[0-9]{10,12}$/;\n  // passwordPattern = /^[0-8]{8,30}$/;\n\n  ngOnInit() {\n    this.signupForm = new FormGroup({\n      'username': new FormControl(null, Validators.required),\n      'email': new FormControl(null, [Validators.required, Validators.email]),\n      'phone': new FormControl('', [Validators.required, Validators.pattern(this.phonePattern)]),\n      'password': new FormControl(null, [Validators.required, Validators.minLength(8)]),\n      'hobbies': new FormArray([])\n      // 'password': new FormControl(null, Validators.required)\n    })\n  }\n  \n  onSubmit() {\n    console.log(this.signupForm);\n  }\n\n  onAddHobbies() {\n    const control = new FormControl(null, Validators.required);\n    (<FormArray>this.signupForm.get('hobbies')).push(control);\n  }\n  getControls() {\n      return (<FormArray>this.signupForm.get('hobbies')).controls;\n  }\n\n}\n\n","<div class=\"container\">\n    <div class=\"row py-md-5 py-3 min-vh-100 align-items-center justify-content-center\">\n        <div class=\"col-md-8 p-5 form-wrap\">\n            <h1 class=\"text-white text-center mb-5\">Sign Up</h1>\n            <form [formGroup]=\"signupForm\" (ngSubmit)=\"onSubmit()\">\n                <div class=\"form-group\">\n                    <input type=\"text\" class=\"form-control\" formControlName=\"username\">\n                    <label for=\"username\">Username</label>\n                    <small class=\"form-text text-danger\" *ngIf=\"!signupForm.get('username').valid && signupForm.get('username').touched\">Please Enter Your Name</small>\n                </div>\n                <div class=\"form-group\">\n                    <input type=\"email\" class=\"form-control\" formControlName=\"email\">\n                    <label for=\"email\">Email Address</label>\n                    <span *ngIf=\"!signupForm.get('email').valid && signupForm.get('email').touched\">\n                        <small class=\"text-danger\" *ngIf=\"signupForm.get('email').errors['email']\">This is Email Address is invalid</small>\n                        <small class=\"text-danger\" *ngIf=\"signupForm.get('email').errors['required']\">This is Email Address is Required</small>\n                    </span>\n                </div>\n                <div class=\"form-group\">\n                    <input type=\"number\" class=\"form-control\" formControlName=\"phone\">\n                    <label for=\"phone\">Mobile</label>\n                    <span *ngIf=\"!signupForm.get('phone').valid && signupForm.get('phone').touched\">\n                        <small class=\"text-danger\" *ngIf=\"signupForm.get('phone').errors['pattern']\">This is Mobile is invalid</small>\n                        <small class=\"text-danger\" *ngIf=\"signupForm.get('phone').errors['required']\">This is Mobile is Required</small>\n                    </span>\n                </div>\n                <div class=\"form-group\">\n                    <input type=\"password\" class=\"form-control\" formControlName=\"password\">\n                    <label for=\"\">Password</label>\n                    <span *ngIf=\"!signupForm.get('password').valid && signupForm.get('password').touched\">\n                        <small class=\"text-danger\" *ngIf=\"signupForm.get('password').errors['minlength']\">Use 8 or more characters or numbers for your password</small>\n                        <small class=\"text-danger\" *ngIf=\"signupForm.get('password').errors['required']\">This is Password is Required</small>\n                    </span>\n                </div>\n                <div class=\"mb-3\" formArrayName=\"hobbies\">\n                    <button class=\"btn btn-outline-dark text-white mb-3\" type=\"button\" (click)=\"onAddHobbies()\">Add Hobby</button>\n                    <div class=\"form-group\" *ngFor=\"let hobbyControl of getControls(); let i = index\">\n                        <input type=\"text\" class=\"form-control\" [formControlName]=\"i\">\n                    </div>\n                </div>\n                <div class=\"d-flex justify-content-end\">\n                    <button class=\"btn btn-submit\" type=\"submit\" [disabled]=\"!signupForm.valid\">\n                        <span class=\"btn-anim-top-right\"></span>\n                        <span class=\"btn-anim-bottom-left\"></span>\n                        Submit</button>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    ReactiveFormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}